doctype html
html
    head
        meta(charset='utf-8')
        meta(name='viewport' content='width=device-width, initial-scale=1')
        meta(http-equiv='x-ua-compatible' content='ie=edge')
        title loading...
        link(rel='stylesheet' type='text/css' href=assets + 'template/main.css')
    if (bgGradientLow && bgGradientHigh)
        style(type='text/css').
            body {
                width: 100%;
                height: 100%;
                background: linear-gradient(279.3deg, #{bgGradientLow} 4.36%, #{bgGradientHigh} 96.71%);
            }
    else
        style(type='text/css').
            body {
                width: 100%;
                height: 100%;
                background: linear-gradient(279.3deg, #131525 4.36%, #1D2035 96.71%);
            }
    style(type='text/css').
        p {
            color: whitesmoke;
            margin: 40px;
        }

        #loading {
            display: inline-block;
            width: 50px;
            height: 50px;
            border: 3px solid rgba(255, 255, 255, .3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
            -webkit-animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to {
                -webkit-transform: rotate(360deg);
            }
        }

        @-webkit-keyframes spin {
            to {
                -webkit-transform: rotate(360deg);
            }
        }
    body
        center
            p= 'One moment please...'
            div(id='loading')
        script(nonce=nonce).
            function parseQuery(queryString) {
                const query = {};
                const pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');
                //todo if pairs
                for (let i = 0; i < pairs.length; i++) {
                    if(pairs[i] && pairs[i].includes('=')){
                        let pair = pairs[i].split('=');
                        console.info('pair', pair);
                        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');
                    }
                }
                return query;
            }
            const fields = parseQuery(window.location.search || window.location.hash.slice(1));
            fields.upstream = '#{upstream}'
            const uid = fields.state.split('|')[0]
            const authGroup = '#{authGroup}'
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/' + authGroup + '/interaction/' + uid + '/federated';
            Object.keys(fields).forEach((key) => {
                if (key) { // empty fragment will yield {"":""};
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = key;
                    input.value = fields[key];
                    form.appendChild(input);
                }
            });
            document.body.appendChild(form);
            try {
                const url = window.location.href.slice(0, -Math.max(window.location.hash.length, 1));
                window.history.replaceState({}, window.document.title, url);
            } catch(err) {
                console.log('error');
                window.location.hash = "";
            }
            form.submit();