doctype html
html
    head
        meta(charset='utf-8')
        meta(name='viewport', content='width=device-width, initial-scale=1, shrink-to-fit=no')
        meta(http-equiv='x-ua-compatible', content='ie=edge')
        title Sign-in
        link(rel="icon" type="image/png" href="https://ue-platform-content.s3.amazonaws.com/0f8aeec8-8e9b-4629-b06c-6672b4a2e9ad" sizes="100x100")
        style.
            @import url(https://fonts.googleapis.com/css?family=Roboto:400,100);
            html {
                background: #505D6E url(https://s3.amazonaws.com/ue-platform-content/background.jpg) no-repeat center center fixed;
                min-height: 100%;
                -webkit-background-size: cover;
                -moz-background-size: cover;
                -o-background-size: cover;
                background-size: cover;
            }
            body {
                font-family: 'Roboto', sans-serif;
                margin-top: 25px;
                margin-bottom: 25px;
            }
            .login-card {
                padding: 40px;
                padding-top: 0px;
                padding-bottom: 10px;
                width: 274px;
                background-color: #F7F7F7;
                margin: 0 auto 10px;
                border-radius: 2px;
                box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
                overflow: hidden;
            }
            .login-card + .login-card {
                padding-top: 10px;
            }
            .login-card h1 {
                font-weight: 100;
                text-align: center;
                font-size: 2.3em;
            }
            .login-card [type=submit] {
                width: 100%;
                display: block;
                margin-bottom: 10px;
                position: relative;
            }
            .login-card input[type=text], input[type=email], input[type=password] {
                height: 44px;
                font-size: 16px;
                width: 100%;
                margin-bottom: 10px;
                -webkit-appearance: none;
                background: #fff;
                border: 1px solid #d9d9d9;
                border-top: 1px solid #c0c0c0;
                padding: 0 8px;
                box-sizing: border-box;
                -moz-box-sizing: border-box;
            }
            .login {
                text-align: center;
                font-size: 14px;
                font-family: 'Arial', sans-serif;
                font-weight: 700;
                height: 36px;
                padding: 0 8px;
            }
            .login-submit {
                border: 0px;
                color: #fff;
                text-shadow: 0 1px rgba(0,0,0,0.1);
                background-color: #4d90fe;
            }
            .login-card a {
                text-decoration: none;
                color: #666;
                font-weight: 400;
                text-align: center;
                display: inline-block;
                opacity: 0.6;
            }
            .login-help {
                width: 100%;
                text-align: center;
                font-size: 12px;
            }
            .login-client-image img {
                margin-bottom: 20px;
                display: block;
                margin-left: auto;
                margin-right: auto;
                width: 20%;
            }
            .login-card input[type=checkbox] {
                margin-bottom: 10px;
            }
            .login-card label {
                color: #999;
            }
            ul {
                font-weight: 100;
                padding-left: 1em;
                list-style-type: circle;
            }
            li + ul, ul + li, li + li {
                padding-top: 0.3em;
            }
            .center-text {
                text-align: center;
            }
            button {
                cursor: pointer;
            }
    body
        .login-card
            h1=title
            h2.center-text=client.clientName
            h3.center-text=authGroupName
            .login-client-image
            if client.logoUri
                img(src=client.logoUri)
            ul
                - var detailsExpression1 = [details.scopes.accepted, details.scopes.rejected, details.claims.accepted, details.claims.rejected].every(({ length }) => length === 0);
                if detailsExpression1
                    li this is a new authorization
                - var detailsExpression2 = [details.scopes.new, details.claims.new].every(({ length }) => length === 0);
                if detailsExpression2
                    li the client is asking you to confirm previously given authorization
                - var newScopes = new Set(details.scopes.new); newScopes.delete('openid'); newScopes.delete('offline_access');
                if newScopes.size
                    li scopes:
                        ul
                            each scope in Array.from(newScopes)
                                li=scope
                - var newClaims = new Set(details.claims.new); ['sub', 'sid', 'auth_time', 'acr', 'amr', 'iss'].forEach(Set.prototype.delete.bind(newClaims));
                if newClaims.size
                    li claims:
                        ul
                            each claim in Array.from(newClaims)
                                li=claim

                if params.scope && params.scope.includes('offline_access')
                    li the client is asking to have offline access to this authorization
                        if !details.scopes.new.includes('offline_access')
                            | (which you've previously granted)

            form(autocomplete='off', action='/'+authGroup+'/interaction/'+uid+'/confirm', method='post')
                button.login.login-submit(autofocus='', type='submit') Continue
            .login-help
                a(href='/' + authGroup + '/interaction/' + uid + '/abort') [ Cancel ]
                if (client.tosUri || tos)
                    a(href=(client.tosUri || tos)) [ Terms of Service ]
                if (client.policyUri || policy)
                    a(href=(client.policyUri || policy)) [ Privacy Policy ]
