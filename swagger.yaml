openapi: 3.0.0
info:
  version: 1.0.0
  title: Boilerplate Service
  description: "UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2021, all rights reserved.<br><br>
  UE Auth is a multi-tenant OIDC Provider, User Management, B2B Product Access, and Roles/Permissions Management system intended to create a single hybrid solution to serve as Identity and Access for both self-registered B2C Apps and Enterprise B2B Solutions. The feature set combines similar functionality you find in Commercial SaaS providers for Identity Management at far less cost, and provides all of the missing pieces enterprises typically end up having to develop on their own in a single package available to your organization through an <a href='https://github.com/UnitedEffects/ueauth/blob/master/LICENSE.md'>Apache 2.0 license</a>. You can find the project <a href='https://github.com/UnitedEffects/ueauth'>here</a>.<br><br>UE Auth can be thought of in three parts:<ul><li><strong>The OIDC Provider</strong> - Built on the only node.js <a href='https://github.com/panva/node-oidc-provider'>certified OIDC provider library</a> currently available by <a href='https://github.com/panva'>Filip Skokan (Panva)</a></li><li><strong>UE Auth General</strong> - Our implementation of Auth Groups as unique pools of users, accounts, notification plugins, and other operations, all documented in this API</li><li><strong>UE Auth Access</strong> - Our implementation of b2b models to organize customers or departments (Organizations), products, roles, permissions and the application of these concepts to users to define access</li></ul>This OpenAPI specification does not detail the entirety of the OIDC API. Instead, you can reference the official Open ID Connect documentation for the API (<a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>) or Panva's amazingly detailed documentation in <a href='https://github.com/panva/node-oidc-provider'>GitHub</a>. Within UE Auth, the OIDC endpoints are distinguished by being available directly from the root domain with the Auth Group context: e.g. <code>/{group}/token</code>. As a general reference, this provider implements the following OIDC endpoints, which you will find specific contract documentation for in the above mentioned <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br>
  check_session: '/{group}/session/check',<br>
  code_verification: '/{group}/device',<br>
  device_authorization: '/{group}/device/auth',<br>
  end_session: '/{group}/session/end',<br>
  introspection: '/{group}/token/introspection',<br>
  initial_access: '/{group}/token/initial_access',<br>
  jwks: '/{group}/jwks',<br>
  pushed_authorization_request: '/{group}/request',<br>
  registration: '/{group}/reg',<br>
  revocation: '/{group}/token/revocation',<br>
  token: '/{group}/token',<br>
  userinfo: '/{group}/me'</code><br><br>
  <small>While the OIDC API is not fully detailed, a few of the endpoints are defined below to aid in debug or testing.</small><br><br>
  UE Auth General and Access APIs are completely defined and documented below for your convenience. These APIs are distinguished in the service with prefix <code>/api</code>.
  <h2>Getting Started</h2><i>If you are the service owner and deploying it for the first time, see the github wiki for <a href='https://github.com/UnitedEffects/ueauth/wiki/Developer-Info#the-root-account'>initial setup instructions.</a></i><br><br>First, please familiarize yourself with the concepts these resources (AuthGroup, Organization, etc...) represent by reading about them <a href='https://github.com/UnitedEffects/ueauth/wiki'>here</a>.<br><br>Second, please review the overview of how permissions manage access to this API <a href='https://github.com/UnitedEffects/ueauth/wiki/UE-Auth-Permissions'>here</a>.<br><br>Finally, you'll need an Auth Group to utilize the service.<ul><li>POST a new Auth Group making sure to save the Initial Access Token provided upon creation.</li><li>Once you have it, POST a new user account to the same auth group, making sure to use the same email address and the initial access token as a bearer token.</li><li>This will activate your auth group, create the account, and provide you with a client_id and secret to use for all interactions with this API.</li><li>Access the wellknown using your group ID or group 'pretty name': https://qa.ueauth.io/{group}/.well-known/openid-configuration</li></ul>"
  x-logo:
    url: https://ue-platform-content.s3.amazonaws.com/0f8aeec8-8e9b-4629-b06c-6672b4a2e9ad
tags:
  - name: Auth Groups
    description: Auth Groups
  - name: Plugins
    description: Plugin configurations for the service
  - name: Users
    description: User Accounts
  - name: Organization Users
    description: Managing user accounts and access associated to an organization
  - name: User Access
    description: roles and permissions by account
  - name: Clients
    description: Administration of Group Registered Clients - Beyond OIDC Scope
  - name: Notification
    description: Manage notifications sent to the http notification plugin
  - name: Organizations
    description: Create or View organization data
  - name: Domains
    description: Create, Update, View or Delete domains within a Org
  - name: Products
    description: Create, Update, View or Delete Products
  - name: Roles
    description: Create, Update, View or Delete roles globally for all products and all organizations
  - name: Organization Roles
    description: Create, Update, View or Delete roles specific to a single organization
  - name: Permissions
    description: Create, Update, View or Delete permissions
  - name: Operations
    description: Commands for Artifact or Security Updates
  - name: General Functional
    description: APIs specifically for the United Effects UI implementation
  - name: OIDC
    description: Some Key OIDC endpoints (not all) - see <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>
  - name: Health

paths:
  # Functional APIs
  /api/{group}/group:
    get:
      tags:
        - General Functional
      summary: Return a clientID for Core UI from authGroup
      description: Return a clientID for Core UI from authGroup. secured by UI host whitelist
      parameters:
        - name: group
          in: path
          description: id or prettyName of the authgroup
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: V1StGXR8_Z5jdHi6B-myT
                  prettyName:
                    type: string
                  clientId:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: [ ]
        - openId: [ ]
  /api/{group}/checkforupdates:
    get:
      tags:
        - General Functional
      summary: Returns true if you should trigger a core update /api/group/updatecore
      description: Returns true if you should trigger a core update /api/group/updatecore
      parameters:
        - name: group
          in: path
          description: id or prettyName of the authgroup
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: V1StGXR8_Z5jdHi6B-myT
                  prettyName:
                    type: string
                  coreProductId:
                    type: string
                    format: uuid
                  coreAccessDataVersion:
                    type: string
                  availableVersion:
                    type: string
                  updateRequired:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: [ ]
        - openId: [ ]
  /api/{group}/updatecore:
    put:
      tags:
        - General Functional
      summary: Update the permissions and roles of UEAuth to the latest available
      description: Update the permissions and roles of UEAuth to the latest available
      parameters:
        - name: group
          in: path
          description: id or prettyName of the authgroup
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: V1StGXR8_Z5jdHi6B-myT
                  prettyName:
                    type: string
                  coreProductId:
                    type: string
                    format: uuid
                  coreAccessDataVersion:
                    type: string
                  availableVersion:
                    type: string
                  updateRequired:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: [ ]
        - openId: [ ]
  /api/groupcheck/{prettyName}:
    get:
      tags:
        - Auth Groups
      summary: Check if a pretty name is available to save to a group
      description: Check if a pretty name is available to save to a group
      parameters:
        - name: prettyName
          in: path
          description: check to see if this prettyName is available
          required: true
          schema:
            type: string
      responses:
        '202':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - Auth Group
                  available:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  # Group APIs
  /api/group:
    post:
      tags:
        - Auth Groups
      summary: Register a new auth group
      description: Register a new auth group
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authGroupInitial'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeAuthGroup'
        description: Account data to be written
        required: true
  /api/groups:
    get:
      tags:
        - Auth Groups
      summary: Retrieve all auth groups (CRUD operation) - THIS SHOULD BE SYSTEM ADMIN ONLY
      description: 'Uses oData filtering to retrieve Accounts. This will need permissions.'
      parameters:
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroups'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
  '/api/group/{id}':
    get:
      tags:
        - Auth Groups
      summary: Find an Auth Group with ID
      description: Identify a single auth group. Will require permissions
      parameters:
        - name: id
          in: path
          description: id of group type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

    patch:
      tags:
        - Auth Groups
      summary: Patch an existing Auth Group - Owner or SYSTEM ADMIN
      description: Patch an existing Auth Group. This will require permissions.
      parameters:
        - name: id
          in: path
          description: id of group to update
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: JSON Patch specific to your account object
        required: true

  # Plugins
  /api/plugins/global/audit:
    get:
      tags:
        - Plugins
      summary: Retrieves an audit of all plugin updates made and by who sorted from current/latest on back
      description: Retrieves an audit of all plugin updates made and by who sorted from current/latest on back
      operationId: auditPluginOptions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/globalPlugins'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: [ ]
        - openId: []
  /api/plugins/global:
    get:
      tags:
        - Plugins
      summary: Retrieve all global plugin configurations
      description: Retrieve all global plugin configurations
      operationId: getLatestPluginOptions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalPlugins'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: [ ]
        - openId: []
  /api/plugins/global/notifications:
    post:
      tags:
        - Plugins
      summary: Configure Global Notifications Plugins as Service Owner
      description: Configure Global Notifications Plugins as Service Owner
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  enabled:
                    type: boolean
                  notificationServiceClientId:
                    type: string
                  notificationServiceClientName:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                notificationServiceUri:
                  type: string
                  description: the url to the endpoint that will recieve http notification POST requests
                  example: "https://youremailortextservice.com/path"
                currentVersion:
                  type: number
                  description: the current global plugin version. this will autoincrement if successful
        description: Setting for notification desired
        required: true

  # Account APIs
  /api/{group}/account:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Register a new user
      operationId: writeAccount
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/getAccount'
                  - $ref: '#/components/schemas/firstAccountWrite'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeAccount'
        description: Account data to be written
        required: true
  /api/{group}/accounts/search:
    get:
      tags:
        - Users
      summary: Search Accounts in the authGroup
      description: Allows you to search accounts in the authgroup using a text search
      operationId: searchAccounts
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: q
          in: query
          description: keyword search
          required: true
          schema:
            type: string
        - name: restrictEmail
          in: query
          description: restrict the search to specific email domains. comma dilimited
          example: example.com,google.com,test.com
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  exact:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        email:
                          type: string
                          format: email
                  like:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        email:
                          type: string
                          format: email
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
  /api/{group}/accounts:
    get:
      tags:
        - Users
      summary: Retrieve all users (CRUD operation)
      description: 'Uses oData filtering to retrieve Accounts. This will need permissions.'
      operationId: getAccounts
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccounts'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
  '/api/{group}/account/{id}':
    get:
      tags:
        - Users
      summary: Find a User with ID
      description: Identify a single user. Will require permissions
      operationId: getAccount
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    delete:
      tags:
        - Users
      summary: Hard delete a user - only authGroup owner
      description: Hard delete a user - only authGroup owner
      operationId: deleteAccount
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    patch:
      tags:
        - Users
      summary: Patch an existing User
      description: Patch an existing User. This will require permissions.
      operationId: patchAccount
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account to update
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: JSON Patch specific to your account object
        required: true

  # User Account API restricted to Organizations
  /api/{group}/organization/{org}/account:
    put:
      tags:
        - Organization Users
      summary: Register a new or existing user as part of an organization
      description: Register a new or existing user as part of an organization
      operationId: writeAccountToOrg
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: org
          in: path
          description: the organization ID
          schema:
            type: string
          required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/getAccount'
                  - $ref: '#/components/schemas/firstAccountWrite'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeAccountByOrg'
        description: Account data to be written
        required: true
  /api/{group}/organization/{org}/accounts:
    get:
      tags:
        - Organization Users
      summary: Retrieve all users associated to an organization
      description: 'Uses oData filtering to retrieve Accounts'
      operationId: getAccounts
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: org
          in: path
          description: the organization ID
          schema:
            type: string
          required: true
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccounts'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
  '/api/{group}/organization/{org}/account/{id}':
    get:
      tags:
        - Organization Users
      summary: Find a User with ID
      description: Identify a single user associated to an organization.
      operationId: getAccountByOrg
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: org
          in: path
          description: the organization ID
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  /api/{group}/access/organization/{org}/account/{id}:
    delete:
      tags:
        - Organization Users
      summary: Remove an organization from user's access
      description: Remove an organization from user's access
      operationId: remove Org from access
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: Organization id access is being applied to
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUserAccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    get:
      tags:
        - Organization Users
      summary: Get defined user access in order to make edits with PUT
      description: Get defined user access
      operationId: getDefinedUserAccess
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: Organization id access is being applied to
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/access'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    put:
      tags:
        - Organization Users
      summary: Apply org, domain, or roles to a user
      description: Define a user's access
      operationId: defineUserAccess
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: Organization id access is being applied to
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUserAccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeAccess'
        description: Updated access object
        required: true

  # User Access
  /api/{group}/access/account/{id}:
    get:
      tags:
        - User Access
      description: Get user roles & permissions
      operationId: getUserAccess
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: >-
            Unique user identifier
          required: true
          schema:
            type: string
        - name: org
          in: query
          description: allows a AuthGroup Admin to query a specific organization context. Otherwise, orgId is restricted to the domainId and token context
          required: false
          schema:
            type: string
        - name: domain
          in: query
          description: if ID provided, it restricts the response to this domain
          required: false
          schema:
            type: string
        - name: product
          in: query
          description: if ID provided, it restricts the response to this product
          required: false
          schema:
            type: string
        - name: includeMiscRoles
          in: query
          description: these are roles attributed to the user that do not correlate to the domains or products provided access
          required: false
          schema:
            type: boolean
        - name: excludePermissions
          in: query
          description: flag to let us know to return both roles and permissions, or just roles
          required: false
          schema:
            type: boolean
        - name: minimized
          in: query
          description: if true, this creates arrays of ids in string form to reduce the size of the data
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
  /api/{group}/access/validate:
    get:
      tags:
        - User Access
      description: returns the roles and permissions(optional) that the token is specifically authorized for
      operationId: validateToken
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: query
          description: allows a AuthGroup Admin to query a specific organization context. Otherwise, orgId is restricted to the domainId and token context
          required: false
          schema:
            type: string
        - name: domain
          in: query
          description: if ID provided, it restricts the response to this domain
          required: false
          schema:
            type: string
        - name: product
          in: query
          description: if ID provided, it restricts the response to this product
          required: false
          schema:
            type: string
        - name: includeMiscRoles
          in: query
          description: these are roles attributed to the user that do not correlate to the domains or products provided access
          required: false
          schema:
            type: boolean
        - name: excludePermissions
          in: query
          description: flag to let us know to return both roles and permissions, or just roles
          required: false
          schema:
            type: boolean
        - name: minimized
          in: query
          description: if true, this creates arrays of ids in string form to reduce the size of the data
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  /api/{group}/access/organizations:
    get:
      tags:
        - User Access
      description: returns the list of organizations to which a user (the caller) has been added
      operationId: getMyOrgs
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
  /api/{group}/access/organization/{org}/terms:
    put:
      tags:
        - User Access
      summary: Accept or decline terms of access for an organization. Declining will remove you from the organization.
      description: Accept or decline terms of access for an organization. Declining will remove you from the organization.
      operationId: acceptOrDeclineOrg
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: Organization id access is being applied to
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - 'accept'
                    - 'decline'
        required: true

  # Non-OIDC Specific Client APIs
  /api/{group}/clients:
    get:
      tags:
        - Clients
      summary: Retrieve all clients (CRUD operation) - ADMIN
      description: 'Uses oData filtering to retrieve Clients. This will need permissions.'
      operationId: get
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClients'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
  '/api/{group}/client/{id}':
    get:
      tags:
        - Clients
      summary: Sanitized Response (no secrets) - Find a client with ID
      description: Identify a single client. Will require permissions
      operationId: getOne
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    delete:
      tags:
        - Clients
      summary: Hard delete - authGroup owners only
      description: Hard delete - authGroup owners only
      operationId: deleteOne
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  # Operation APIs for security update commands
  /api/{group}/operations:
    post:
      tags:
        - Operations
      summary: Execute operations against a auth group (only rotate_keys currently supported)
      description: Execute operations against a auth group (only rotate_keys currently supported)
      operationId: groupOperations
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations'
        description: Account data to be written
        required: true

  /api/{group}/operations/reset-user-password:
    post:
      tags:
        - Operations
      summary: Initiate password reset for an account. API does not return anything. Requires Notification Plugin to be working.
      description: Initiate password reset for an account. Requires that the account have a valid matching email or phone number associated. API does not return anything on success. Requires Notification Plugin to be working. Token not required for this endpoint.
      operationId: userPasswordReset
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '204':
          description: successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passwordReset'
        description: Account data to be written
        required: true

  /api/{group}/operations/organization/{org}/user/{id}:
    post:
      tags:
        - Operations
      summary: Execute operations against a user within an organization
      description: Execute operations against a user within an organization. Currently supports - verify_account, reset_password
      operationId: userOperationsByOrg
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: org
          in: path
          description: the organization id
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: the user/account id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful update operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '204':
          description: successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userOperations'
        description: Account data to be written
        required: true

  /api/{group}/operations/user/{id}:
    post:
      tags:
        - Operations
      summary: Execute operations against a user
      description: Execute operations against a user. Currently supports - verify_account, reset_password, generate_password
      operationId: userOperations
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: the user/account id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful update operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '204':
          description: successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userOperations'
        description: Account data to be written
        required: true

  /api/{group}/operations/client/{id}:
    post:
      tags:
        - Operations
      summary: Execute operations against a client
      description: Execute operations against a client. Currently supports - rotate_secret & rotate_registration_access_token
      operationId: clientOperations
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: the client id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations'
        description: Account data to be written
        required: true


  # Notifications APIs
  /api/{group}/notification/process:
    post:
      tags:
        - Notification
      summary: Process up to 25 currently unprocessed notifications
      description: This is a stateless way to processes old notifications that may not be processed yet. You should build a cronjob to make this requet on a cadence of your choosing.
      operationId: processBulkNotifications
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/notification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  '/api/{group}/notification/{id}/process':
    put:
      tags:
        - Notification
      summary: Process a specific notification that is currently not processed.
      description: Process a specific notification that is currently not processed. If the notification is already processed, it will simply return that notification but take no action. Keep in mind notifications have a 30 day TTL
      operationId: processNotification
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of notification to process
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  /api/{group}/notification:
    post:
      tags:
        - Notification
      summary: Define a new notification
      description: Define a new notification to be processed. Only possible if global & auth group notifications are enabled
      operationId: writeNotification
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeNotification'
        description: the notification as stored in ue auth system
        required: true

  /api/{group}/notifications:
    get:
      tags:
        - Notification
      summary: Retrieve all notifications in the group
      description: Retrieve all notifications in the group. Keep in mind notifications have a 30 day TTL
      operationId: getNotifications
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/notification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  '/api/{group}/notification/{id}':
    get:
      tags:
        - Notification
      summary: return a specific notification
      description: return a specific notification. Keep in mind notifications have a 30 day TTL
      operationId: getNotification
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of notification to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    delete:
      tags:
        - Notification
      summary: Hard delete a notification
      description: Hard delete a notification. Notifications can not be updated once created, they can only be deleted. Keep in mind that if the notification was already processed, this will not change how that processing communicated the notification to the recipient.
      operationId: deleteNotification
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of notification to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  # A few of the OIDC specific API Endpoints
  /{group}/token:
    post:
      tags:
        - OIDC
      summary: Request a token code provided via code authorization flow
      description: Request a token code provided via code authorization flow
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessTokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/codeAuthorizationTokenRequest'
            encoding:
              grant_type:
                style: form
              client_secret:
                style: form
              redirect_uri:
                style: form
              format:
                style: form
              code:
                style: form
              client_id:
                style: form
              scope:
                style: form
              access_filter_organization:
                style: form
              access_filter_domain:
                style: form
              access_filter_product:
                style: form
        required: true

  /{group}/token/initial-access:
    post:
      tags:
        - OIDC
      summary: Request an OIDC initial access token
      description: Request an OIDC initial access token. You can use this to create a client or even provide it to someone so they can register to a locked auth group (a.k.a. user pool)
      operationId: getInitialAccessToken
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/initialAccessToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/initialAccessTokenRequest'
        required: false

  /{group}/reg:
    post:
      tags:
        - OIDC
      summary: Register a new client - may require an initial access token depending on config
      description: Register a new client - may require an initial access token depending on config
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerClient'
        required: true

  /{group}/reg/{id}:
    put:
      tags:
        - OIDC
      summary: Update a new client - may require a registration access token
      description: Update a new client - may require a registration access (RAI) token. If the RAI is required (configuration) it will rotate on each update and you will need to keep track of it. If you have lost your token, you can request a new one from the operations/client endpoint.
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: the client id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clientObjectUpdate'
        required: true
    get:
      tags:
        - OIDC
      summary: Get a registerd lient - may require a registration access token
      description: Get a registered client - may require a registration access (RAI) token. If the RAI is required (configuration) it will rotate on each update and you will need to keep track of it. If you have lost your token, you can request a new one from the operations/client endpoint.
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: the client id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
  /{group}/me:
    get:
      tags:
        - OIDC
      summary: Standard OIDC UserInfo endpoint
      description: UserInfo endpoint will not work with a JWT token. It must be opaque.
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userInfoObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  /api/{group}/products:
    get:
      tags:
        - Products
      description: Get all products
      operationId: getProducts
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    post:
      tags:
        - Products
      description: Create new products
      operationId: createProduct
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeProduct'
        description: Updated user object
        required: true

  /api/{group}/products/{id}:
    get:
      tags:
        - Products
      description: Get products info
      operationId: getProduct
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: >-
            Unique user identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    patch:
      tags:
        - Products
      description: Create products for the DELETE
      operationId: updateProduct
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: >-
            Unique user identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: Updated user object
        required: true
    delete:
      tags:
        - Products
      description: Delete products. Deleting a product will delete all associated permissions.
      operationId: deleteProduct
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: >-
            Unique user identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  /api/{group}/products/{product}/reference-check/permissions:
    get:
      tags:
        - Products
      summary: Find out how many permissions reference this product
      description: Find out how many permissions reference this product. Useful to run before a delete operation.
      operationId: checkPermissionsForProduct
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Product Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalReferences:
                    type: number
                  permissionIds:
                    type: array
                    items:
                      type: string
                      format: uuid
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  /api/{group}/roles:
    get:
      tags:
        - Roles
      summary: Scoped to authgroup and available across organizations and products
      description: get all roles across products in your authgroup
      operationId: getAllRolesAcrossProducts
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  /api/{group}/organization/{org}/roles:
    get:
      tags:
        - Organization Roles
      summary: Scoped to this specific organization - returns global roles + org specific across all organization products
      description: get all roles across products in your organization
      operationId: getAllRolesAcrossProductsByOrg
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: organization Id
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
  /api/{group}/organizations/{org}/products/{product}/roles:
    get:
      tags:
        - Organization Roles
      summary: Scoped to this specific organization - returns global roles and roles specific to the provided org for a given product
      description: get roles info for a product
      operationId: getProductRolesByOrg
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: organization Id
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: >-
            Unique user identifier
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    put:
      tags:
        - Organization Roles
      summary: Scoped to this specific organization for a given product
      description: Define new roles specific to this organization. Should not be used for global roles.
      operationId: createRoleByOrg
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: organization Id
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Unique product identifier
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/roleWrite'
        description: Create a new role
        required: true
      security:
        - bearer: []
        - openId: []

  /api/{group}/organizations/{org}/products/{product}/roles/{id}:
    delete:
      tags:
        - Organization Roles
      summary: Scoped to this specific organization - delete a role specific to this organization
      description: remove a custom role specific to this organizatino and product
      operationId: deleteProductRoleByOrg
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: organization Id
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: >-
            Unique user identifier
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique role identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    get:
      tags:
        - Organization Roles
      summary: Scoped to this specific organization - returns a role, either globally available or specific to this organization
      description: get roles info for a product
      operationId: getProductRoleByOrg
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: organization Id
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: >-
            Unique user identifier
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique role identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    patch:
      tags:
        - Organization Roles
      summary: Scoped to this specific organization - updates a role specific to this organization
      description: Update a role specific to the organization. This should not be used for global roles.
      operationId: updateRoleByOrg
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: organization Id
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Unique product identifier
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique role identifier
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: Create a new role
        required: true
      security:
        - bearer: []
        - openId: []

  /api/{group}/products/{product}/roles:
    get:
      tags:
        - Roles
      summary: Scoped to authgroup and available across organizations
      description: get roles info for a product. Use oData filters to see just global or specific to an organization.
      operationId: getProductRoles
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: >-
            Unique user identifier
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    post:
      tags:
        - Roles
      summary: Scoped to authgroup and available across organizations
      description: Create new globally available roles. All organizations will see this role in their list of product roles.
      operationId: createRole
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Unique product identifier
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/roleWrite'
        description: Create a new role
        required: true
      security:
        - bearer: []
        - openId: []
  /api/{group}/products/{product}/roles/{id}:
    get:
      tags:
        - Roles
      summary: Scoped to authgroup and available across organizations
      description: return info of any role regardless of scope (i.e. global or organization)
      operationId: getRole
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Id of the associated product
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Id of the role in question
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    patch:
      tags:
        - Roles
      summary: Scoped to authgroup and available across organizations
      description: Update any role regardless of scope (global or organization)
      operationId: updateRole
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Id of the associated product
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Id of the role in question
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: Created user object
        required: true
      security:
        - bearer: []
        - openId: []
    delete:
      tags:
        - Roles
      summary: Scoped to authgroup and available across organizations
      description: Delete any role
      operationId: deleteRole
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Id of the associated product
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Id of the role in question
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  /api/{group}/organizations:
    get:
      tags:
        - Organizations
      description: Get organizations
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    post:
      tags:
        - Organizations
      description: Create a organization
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeOrganization'
        description: Create a new role
        required: true
      security:
        - bearer: []
        - openId: []
  /api/{group}/organizations/{id}:
    get:
      tags:
        - Organizations
      description: Get organization by Id
      operationId: getOrg
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: organization id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    patch:
      tags:
        - Organizations
      description: Refresh Org Data manually by hitting the source of truth
      operationId: updateOrg
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: organization id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: JSON Patch specific to your account object
        required: true
      security:
        - bearer: []
        - openId: []
    delete:
      tags:
        - Organizations
      description: Delete local IAM record of the organization
      operationId: deleteOrg
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: organization id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  /api/{group}/organizations/{org}/domains/{id}:
    get:
      tags:
        - Domains
      description: Get domain info by Id
      operationId: getDomain
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: organization id guid
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: domain id guid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

    patch:
      tags:
        - Domains
      description: Update domain Info
      operationId: updateDomain
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: organization id guid
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: domain id guid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: Create a new role
        required: true
      security:
        - bearer: []
        - openId: []
    delete:
      tags:
        - Domains
      description: Delete domain
      operationId: deleteDomain
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: organization id guid
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: domain id guid
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  /api/{group}/organizations/{org}/domains:
    get:
      tags:
        - Domains
      description: Get all domains by organizations Id
      operationId: getDomains
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: organization id
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    post:
      tags:
        - Domains
      description: Create a domain in a specified organizations
      operationId: createDomain
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: org
          in: path
          description: organization id
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeDomain'
        description: Create a new role
        required: true
      security:
        - bearer: []
        - openId: []

  /api/{group}/products/{product}/permissions:
    get:
      tags:
        - Permissions
      description: get permissions
      operationId: getPermissions
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Product Id
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/permission'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    post:
      tags:
        - Permissions
      summary: Create a permission. Once created, it can't be updated. You must delete and create new.
      operationId: createPermission
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Product Id
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permission'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writePermission'
        description: Create a new role
        required: true
      security:
        - bearer: []
        - openId: []

  /api/{group}/products/{product}/permissions/{id}:
    get:
      tags:
        - Permissions
      summary: Get a permission by Id
      description: Get a permission by Id
      operationId: getPermission
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Product Id
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: permission id guid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permission'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
    delete:
      tags:
        - Permissions
      description: Delete permission will automatically clear all references from roles. Use /permissions/check/role to see which
      operationId: deletePermission
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Product Id
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: permission id guid
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  /api/{group}/products/{product}/permissions/{id}/reference-check/role:
    get:
      tags:
        - Permissions
      summary: Find out how many roles reference this permission
      description: Find out how many roles reference this permission. Useful to run before a delete operation.
      operationId: checkRolesForPermission
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Product Id
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: permission id guid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalReferences:
                    type: number
                  roleIds:
                    type: array
                    items:
                      type: string
                      format: uuid
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  /api/{group}/products/{product}/permission/actions:
    get:
      tags:
        - Permissions
      summary: Get all of the available permission actions for a product
      description: Get all of the available permission actions for a product. These are used to create permissions.
      operationId: getPermissionTargets
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Product Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    default: 'actions'
                  values:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []
  /api/{group}/products/{product}/permission/targets:
    get:
      tags:
        - Permissions
      summary: Get all of the available permission targets for a product
      description: Get all of the available permission targets for a product. These are used to create permissions.
      operationId: getPermissionTargets
      parameters:
        - name: group
          in: path
          description: Auth Group Id or name
          required: true
          schema:
            type: string
        - name: product
          in: path
          description: Product Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    default: 'targets'
                  values:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
        - openId: []

  # Health Check Endpoint
  /api/health:
    get:
      tags:
        - Health
      summary: Health check
      description: Health check
      responses:
        '200':
          description: GET successful
        '500':
          $ref: '#/components/responses/UnknownError'


servers:
  - url: http://localhost:3000
components:

  responses:
    Forbidden:
      description: Request is forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'
    BadRequest:
      description: Bad Request, try again
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'
    NotFound:
      description: Requested object not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'
    InvalidInput:
      description: Request is correct but one of your inputs is wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'
    ExpectationFailed:
      description: An expectation associated to the request failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'
    Unauthorized:
      description: Unauthorized Access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'
    UnknownError:
      description: Unknown Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'

  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      description: 'For Bearer based tokens, simply enter the token (prefixing with "bearer" is not required). Until Swagger UI supports OIDC directly, you can use this security field with OIDC tokens as well.'
    openId:
      type: openIdConnect
      description: OIDC specific OAuth2 implementation. You should be accessing the instance of swagger specific to your group to use this - /{group}/swagger.
      openIdConnectUrl: http://example.com/group/.well-known/openid-configuration

  schemas:
    defaultError:
      required:
        - error
        - message
        - id
      properties:
        error:
          type: string
          description: Type of error
        message:
          type: string
          description: Additional information regarding the error
        id:
          type: string
          format: uuid
          description: Unique ID to help find the error in a logging stack

    operations:
      type: object
      required:
        - operation
      properties:
        operation:
          type: string
          enum:
            - rotate_secret
            - rotate_keys
            - rotate_registration_access_token

    userOperations:
      type: object
      required:
        - operation
      properties:
        operation:
          type: string
          enum:
            - verify_account
            - password_reset
            - generate_password

    initialAccessTokenRequest:
      properties:
        email:
          type: string
          description: This adds an email address to the token, locking its use to a user with that email address only. useful when providing a token as part of an invite; however, this is not required in all cases. For example, you do not need this to use an IAT for OIDC client creation.
        sub:
          type: string
          description: This adds a userId to the token, locking its use to a user with that id only.
        expires:
          type: number
          description: Number of seconds after which this token expires. Default is 604800 (7 days).

    initialAccessToken:
      properties:
        iat:
          type: number
          description: issue time
        exp:
          type: number
          description: expiration time
        kind:
          type: string
          default: "InitialAccessToken"
        jti:
          type: string
          description: the token
        email:
          type: string
          format: email
          description: if provided, this is the locked user email
        sub:
          type: string
          format: uuid
          description: if provided, this is the locked user id

    codeAuthorizationTokenRequest:
      type: object
      properties:
        grant_type:
          type: string
          description: Type of grant being requested, of which authorization_code is an example
          default: "authorization_code"
        client_secret:
          type: string
        redirect_uri:
          type: string
          format: url
        code:
          type: string
          description: code recieved from authorization redirect
        client_id:
          type: string
        scope:
          type: string
        audience:
          type: string
        code_verifier:
          type: string
        resource:
          type: string
        client_assertion:
          type: string
        client_assertion_type:
          type: string
        x_access_filter_organization:
          type: string
          description: Not part of the OIDC specification - used for UEAuth
        x_access_filter_domain:
          type: string
          description: Not part of the OIDC specification - used for UEAuth
        x_access_filter_product:
          type: string
          description: Not part of the OIDC specification - used for UEAuth

    inviteOperation:
      type: object
      required:
        - operation
      additionalProperties: false
      properties:
        operation:
          type: string
          enum:
            - accept
            - decline
            - resend

    accessTokens:
      properties:
        access_token:
          type: string
          description: this is an access_token and is primarily used for API access
        expires_in:
          type: number
          description: when tokens expire
        id_token:
          type: string
          description: this is an id_token and is primarily used to idenitify a user via claims, not for use with APIs
        scope:
          type: string
          description: requested scopes delimited by spaces
        token_type:
          type: string

    registerClient:
      properties:
        client_name:
          type: string
          description: A recognizable name identifying what this client represents
        grant_types:
          type: array
          items:
            type: string
            description: type of grant to enable - i.e. client_credentials, authorization_code or implicit
        response_types:
          type: array
          items:
            type: string
            description: type of responses to enable - i.e. 'id_token code' or 'id_token'. restrictions to combinations apply, see official oidc docs
        redirect_uris:
          type: array
          items:
            type: string
            format: url
            description: urls that are valid for redirection upon authorization

    getAccounts:
      properties:
        type:
          type: string
          enum: ['Account']
        data:
          type: array
          items:
            $ref: '#/components/schemas/accountObject'

    firstAccountWrite:
      description: the first account on a new auth group activates the group and creates a client
      properties:
        type:
          type: string
          enum: ['Account']
        data:
          type: object
          $ref: '#/components/schemas/accountObject'
        authGroup:
          type: object
          $ref: '#/components/schemas/authGroup'
        client:
          type: object
          $ref: '#/components/schemas/clientObject'


    getAccount:
      description: if the auth group is active, this is the response
      properties:
        type:
          type: string
          enum: ['Account']
        data:
          type: object
          $ref: '#/components/schemas/accountObject'

    getClients:
      type: object
      properties:
        type:
          type: string
          enum: ['Client']
        data:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/clientObject'

    getClient:
      type: object
      properties:
        type:
          type: string
          enum: ['Client']
        data:
          type: object
          $ref: '#/components/schemas/clientObject'

    writeClientObject:
      type: object
      required:
      - grant_types
      - response_types
      - redirect_uris
      properties:
        application_type:
          type: string
          default: web
          enum:
            - web
            - native
        grant_types:
          type: array
          default: []
          items:
            type: string
            enum:
             - authorization_code
             - implicit
             - refresh_token
             - client_credentials
        id_token_signed_response_alg:
          type: string
        post_logout_redirect_uris:
          type: array
          default: []
          items:
            type: string
            format: uri
        require_auth_time:
          type: boolean
          default: false
        response_types:
          type: array
          default: []
          items:
            type: string
            default: code
            enum:
              - code
              - id_token
              - token
        subject_type:
          type: string
        token_endpoint_auth_method:
          type: string
        introspection_endpoint_auth_method:
          type: string
        revocation_endpoint_auth_method:
          type: string
        client_name:
          type: string
          description: A name for the client that is unique within the authGroup
        redirect_uris:
          type: array
          default: []
          items:
            type: string
            format: uri
        client_skip_consent:
          type: boolean
          default: false
          description: only use this for first-party clients (those you control directly)
        register_url:
          type: string
          format: url
          description: used to populate the href for the register link on login using this client
        tos_url:
          type: string
        policy_url:
          type: string


    clientObject:
      type: object
      required:
        - application_type
        - grant_types
        - response_types
        - client_id
        - client_name
        - client_secret
        - redirect_uris
        - auth_group
      description: this may not be all inclusive, consult the most current oidc specification
      allOf:
        - $ref: '#/components/schemas/writeClientObject'
      properties:
        request_uris:
          type: array
          default: []
          items:
            type: string
            format: uri
        client_id_issued_at:
          type: integer
        client_id:
          type: string
          description: GUID
        client_secret_expires_at:
          type: integer
          default: 0
        client_secret:
          type: string
          format: password
          description: Auto Generated Secret
        auth_group:
          type: string
          description: the tenant ID (or prettyName) for the authorization group of clients, accounts and oidc configs
        registration_client_uri:
          type: string
          description: the oidc spec client access url for api calls
          format: uri
        registration_access_token:
          type: string
          description: Required to POST or PUT updates to clients if not the authGroup owner. Rotates on each call.

    clientObjectUpdate:
      type: object
      required:
      - application_type
      - grant_types
      - response_types
      - client_id
      - client_name
      - redirect_uris
      - auth_group
      description: this may not be all inclusive, consult the most current oidc specification
      allOf:
        - $ref: '#/components/schemas/writeClientObject'
      properties:
        request_uris:
          type: array
          default: []
          items:
            type: string
            format: uri
        client_id_issued_at:
          type: integer
        client_id:
          type: string
          description: GUID
        client_secret_expires_at:
          type: integer
          default: 0
        client_secret:
          type: string
          format: password
          description: Auto Generated Secret
        auth_group:
          type: string
          description: the tenant ID (or prettyName) for the authorization group of clients, accounts and oidc configs

    userInfoObject:
      type: object
      additionalProperties: true
      required:
        - sub
        - group
        - email
      properties:
        sub:
          type: string
          description: the userId of the account
        group:
          type: string
          description: the auth group id the account belongs to
        email:
          type: string
          format: email
        username:
          type: string
        verified:
          type: boolean
          description: if the account has been verified via external email or text message

    accountObject:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
          description: guid for this account
        createdAt:
          type: string
          format: date-time
          description: when the account was created
        modifiedAt:
          type: string
          format: date-time
          description: when was the account last modified
        modifiedBy:
          type: string
          description: Id of last modifier
        authGroup:
          type: string
          description: group ID for this account. email addresses are unique to auth groups.
        verified:
          type: boolean
          description: whether or not the account was verified
        blocked:
          type: boolean
          description: root level block of the user from access to the authGroup
        active:
          type: boolean
          description: status of the account
      allOf:
        - $ref: '#/components/schemas/refWriteAccount'

    refWriteAccount:
      type: object
      properties:
        username:
          type: string
          description: optional identifier, must be unique in the authGroup. If not provided, set to email.
        email:
          type: string
          description: email address
        password:
          type: string
          description: this is a password
        txt:
          type: string
          pattern: '\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{1,14}$'
          description: optionally used for verifying account, requires country code. e.g. +1
        metadata:
          type: object
          description: additional context provided by the implementer

    writeAccountByOrg:
      type: object
      additionalProperties: false
      required:
        - email
      properties:
        email:
          type: string
          format: email
        username:
          type: string

    writeAccount:
      type: object
      additionalProperties: false
      required:
        - email
      allOf:
        - $ref: '#/components/schemas/refWriteAccount'
      properties:
        generatePassword:
          type: boolean
          description: if false, password field is required; otherwise, a 32 char password is generated

    writeAuthGroup:
      type: object
      additionalProperties: false
      required:
        - name
        - owner
        - prettyName
        - primaryDomain
        - primaryEmail
      properties:
        name:
          type: string
          description: name of the entity, org, or company creating this group
        prettyName:
          type: string
          description: URL friendly alternative name that can be used instead of the id when referencing the group
          pattern: '^[a-zA-Z0-9-_]*$'
        owner:
          type: string
          format: email
          description: Required to match to the first account added. Will be changed to account uuid after connection.
        locked:
          type: boolean
          default: false
          description: If true, no one can self register an account without an initial access code provided by an admin of the group.
        metadata:
          type: object
          description: extend this with additional data if needed
        config:
          $ref: '#/components/schemas/agConfigOptions'
        pluginOptions:
          $ref: '#/components/schemas/agPluginOptions'
        primaryDomain:
          type: string
          format: url
          description: primary domain url
        primaryTOS:
          type: string
          format: url
          description: link to your company terms of service
        primaryPrivacyPolicy:
          type: string
          format: url
          description: link to your company privacty policy
        primaryEmail:
          type: string
          format: email
          description: this should be a contact email for your authgroup for assistance or inquiry
        registerUrl:
          type: string
          format: url
          description: link to your company primary registration link, if one exists. This will be overrided by client registration links.

    agPluginOptions:
      type: object
      description: these are plugin configurations
      properties:
        notification:
          type: object
          properties:
            enabled:
              type: boolean
              default: false
              description: allows notifications to be sent from the authgroup
            ackRequiredOnOptional:
              type: boolean
              default: false
              description: some notifications are not absolutely required for functionality, if this is false, that functionality will continue and a warning will be sent on notificiation failure. If this is true, the functionality will fail on a notification fail.

    agConfigOptions:
      type: object
      description: these configurations alter how OIDC is processed
      properties:
        #keys:
        #  type: array
        #  description: These are the encryption keys of the authgroup. Manual entry is not recommended.
        ttl:
          type: object
          description: milliseconds before expiration on all properties
          properties:
            accessToken:
              type: number
              default: 3600
            authorizationCode:
              type: number
              default: 600
            clientCredentials:
              type: number
              default: 3600
            deviceCode:
              type: number
              default: 3600
            idToken:
              type: number
              default: 3600
            refreshToken:
              type: number
              default: 86400
            interaction:
              type: number
              default: 3600
            session:
              type: number
              default: 864000
            grant:
              type: number
              default: 864000
        requireVerified:
          type: boolean
          default: false
          description: when true, this ensures that only verified accounts can complete a login
        autoVerify:
          type: boolean
          default: false
          description: when true, this sends a notification to a new account to verify automatically - MUST have notifications enabled first
        passwordLessSupport:
          type: boolean
          default: false
          description: when true, this allows magic link emails for login - MUST have notification enabled first
        centralPasswordReset:
          type: boolean
          default: true
          description: when true, this allows enables the centrally served password reset UI to be accessed publicaly
        scopes:
          type: array
          description: these are scopes that will be availabl to all clients within your authgroup oidc provider
          items:
            type: string
        pkceRequired:
          type: boolean
          description: when this is true, only pkce logins are possible
          example: false
          default: false
        customDomain:
          type: string
          description: custom domain information
          format: url
        ui:
          type: object
          properties:
            #fullCustom:
            #  type: boolean
            #  description: if this is selected, we attempt to load a custom UI. NOT YET IMPLEMENTED
            skin:
              type: object
              properties:
                splashImage:
                  type: string
                  description: this is the splash image used on login and authorization screens. there is a system default
                bgGradientLow:
                  type: string
                  description: this is the background color lower end gradient color
                bgGradientHigh:
                  type: string
                  description: this is the background color higher end gradient color

    authGroup:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          example: V1StGXR8_Z5jdHi6B-myT
          description: nanoid for this account
        createdAt:
          type: string
          format: date-time
          description: when the account was created
        modifiedAt:
          type: string
          format: date-time
          description: when was the account last modified
        modifiedBy:
          type: string
          description: id of last modifier
        active:
          type: string
      allOf:
        - $ref: '#/components/schemas/writeAuthGroup'

    authGroupInitial:
      type: object
      allOf:
        - $ref: '#/components/schemas/authGroup'
      properties:
        securityExpiration:
          type: string
          format: date-time
          description: when this auth group will expire if it is not connected to the owner account and activated
        initialAccessToken:
          type: string
          description: bearer token to use when first connecting an account


    getGroup:
      properties:
        type:
          type: string
          enum:
            - Auth Group
        data:
          $ref: '#/components/schemas/authGroup'

    getGroups:
      properties:
        type:
          type: string
          enum:
            - Auth Group
        data:
          type: object
          $ref: '#/components/schemas/authGroup'

    globalPlugins:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          description: User Id of the person who created latest update config
        notifications:
          type: object
          properties:
            enabled:
              type: boolean
            notificationServiceUri:
              type: string
              description: the url of your service to which we post
            registeredClientId:
              type: string

    notification:
      type: object
      allOf:
        - $ref: '#/components/schemas/writeNotification'
      properties:
        id:
          type: string
          format: uuid
          description: system generated id of the notification
        createdAt:
          type: string
          format: date-time
          description: when the notification was created
        createdBy:
          type: string
          description: userId of the creator
        processed:
          type: boolean
          description: indicates whether or not this notification was successfully sent to the plugin service
        iss:
          type: string
          description: a record of the UE Auth issuer address
        authGroupId:
          type: string
          description: Auth Group ID (not prettyName) associated to the notification
        destinationUri:
          type: string
          description: plugin service http address the request was sent to

    writeNotification:
      type: object
      additionalProperties: false
      description: This will result in a request to an external notification processing service of your choice (see README for notification Plugin)
      required:
        - type
        - recipientEmail
      properties:
        type:
          type: string
          description: supported notification types
          enum:
            - invite
            - forgotPassword
            - passwordless
        formats:
          type: array
          description: intended formats for this notification - sent to the plugin service
          items:
            type: string
            enum:
              - email
              - sms
        recipientUserId:
          type: string
          description: userId of the intended recipient
        recipientEmail:
          type: string
          description: email address of the intended recipient
        recipientSms:
          type: string
          description: mobile phone number of the intended recipient
        screenUrl:
          type: string
          description: optional field to direct the recipient to a specific screen - automatically populated based on type if not provided
        subject:
          type: string
          description: a subject line for the recipient
        message:
          type: string
          description: a message for the recipient
        meta:
          type: object
          description: any addtional metadata that should go with this

    passwordReset:
      additionalProperties: false
      description: Send a unique email address and choose email, sms or both for the reset link to be sent. Email must already be associated to the account. If no preference is picked, all associated data is used. This must be associated with the AuthGroup in the url.
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: the unique email address
        formats:
          type: array
          items:
            type: string
            enum: ['email', 'sms']

    jsonPatch:
      additionalProperties: false
      description: Details for JSONPatch can be found at http://jsonpatch.com/
      type: array
      items:
        type: object
        description: Reference the update model for the full paths to update
        oneOf:
          - required:
            - op
            - path
            - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: object
                description: 'The object, array or object to set the property at the above path to'
          - required:
            - op
            - path
            - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: string
                description: 'The string, array or object to set the property at the above path to'
          - required:
            - op
            - path
            - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: boolean
          - required:
            - op
            - path
            - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: integer
                description: 'The integer, array or object to set the property at the above path to'
          - required:
            - op
            - path
            properties:
              op:
                type: string
                enum: ['remove']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
          - required:
            - op
            - from
            - path
            properties:
              op:
                type: string
                enum: ['copy', 'move']
              from:
                type: string
                description: 'Path to copy or move from'
              path:
                type: string
                description: 'Path to copy or move to'

    userProfileWrite:
      type: object
      additionalProperties: false
      properties:
        accountId:
          type: string
          description: user ID
        givenName:
          type: string
          description: the User's given name
        familyName:
          type: string
          description: often the last name or equivalent
        displayName:
          type: string
          description: preferred display name of the user - sometimes a nickname
        bio:
          type: string
        picture:
          type: string
          description: URI to an image for profile use
        emails:
          type: array
          items:
            type: string
            format: email
            description: unique email address of the user
        contactNumbers:
          type: array
          items:
            type: object
            properties:
              description:
                type: string
              number:
                type: string

    userProfile:
      type: object
      allOf:
        - $ref: '#/components/schemas/userProfileWrite'
      properties:
        id:
          type: string
          format: uuid
          description: id of the profile (NOT THE ACCOUNT)
        authGroup:
          type: string
          description: reference to the UEAuth Auth Group
        modifiedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        modifiedBy:
          type: string

    writeAccess:
      type: object
      properties:
        domains:
          type: array
          items:
            type: string
            format: uuid
        roles:
          type: array
          items:
            type: string
            format: uuid

    access:
      type: array
      items:
        type: object
        properties:
          organization:
            type: object
            allOf:
              - $ref: '#/components/schemas/writeAccess'
            properties:
              id:
                type: string
                format: uuid

    updateUserAccess:
      allOf:
        - $ref: '#/components/schemas/accountObject'
      properties:
        access:
          $ref: '#/components/schemas/access'

    userAccess:
      properties:
        sub:
          type: string
          description: user/account id
          format: uuid
        authGroup:
          type: object
          properties:
            id:
              type: string
            owner:
              type: boolean
              example: false
              description: if true, this person owns the authgroup
            member:
              type: boolean
              example: true
              description: if true, this person belongs to this authgroup - expect this to usually be true
        access:
          $ref: '#/components/schemas/access'

    writeProduct:
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
          description: name of the product
        description:
          type: string
          description: explain what the product does
        associatedClients:
          type: array
          items:
            type: string
            format: uuid
          description: array of OIDC client Ids that may be associated to this business definition of a product
        type:
          type: string
          description: optional categorization of the product
          enum:
            - global
            - app
            - service
            - module
            - domain
            - entity
            - other

    product:
      type: object
      allOf:
        - $ref: '#/components/schemas/writeProduct'
      properties:
        id:
          type: string
          format: uuid
          description: unique id of the product - globally unique
        codedId:
          type: string
          description: this is a 10 character small id that is unique to the authgroup and can be used in place of id
        modifiedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        modifiedBy:
          type: string

    role:
      type: object
      oneOf:
        - $ref: '#/components/schemas/roleWrite'
      properties:
        id:
          type: string
          format: uuid
        codedId:
          type: string
          description: this is a small 10 char id unique to authgroup/product that can be used in place of id
        updateAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        modifiedBy:
          type: string
        createdBy:
          type: string
        product:
          type: string
          format: uuid
          description: product associated
        productCodedId:
          type: string
          description: this is the codedId of the product
        custom:
          type: boolean
          default: false
        organization:
          type: string
          format: uuid
          description: organization this role is associated to if this is custom
        authGroup:
          type: string

    roleWrite:
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
          description: roles name
        description:
          type: string
          description: roles description
        permissions:
          type: array
          items:
            type: string
            format: uuid
            description: permissionIds

    organization:
      type: object
      allOf:
        - $ref: '#/components/schemas/writeOrganization'
      properties:
        id:
          type: string
          format: uuid
        modifiedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        modifiedBy:
          type: string
        createdBy:
          type: string
        authGroup:
          type: string
        active:
          type: boolean
        associatedProducts:
          description: these are products for which the organization has purchased a license
          type: array
          items:
            type: string
            description: unique IDs of the product from the global list associated to the authgroup

    writeOrganization:
      type: object
      additionalProperties: false
      required:
        - name
        - description
        - contactEmail
      description: An organization is a tenant within an AuthGroup
      properties:
        externalId:
          type: string
          description: If an external system manages sales/billing of organizations, you can link with this
        name:
          type: string
          description: organization name
        description:
          type: string
          description: brief overview of the org in question
        type:
          type: string
          description: what kind of organization is this?
          default: customer
          example: customer
          enum:
            - external
            - customer
            - internal
            - other
        contactName:
          type: string
          description: full name of the contact
        contactAddress:
          type: string
        contactPhone:
          type: string
        contactEmail:
          type: string
          format: email
        emailDomains:
          type: array
          items:
            type: string
            description: email domains that are allowed
            example: example.com
        access:
          type: object
          properties:
            required:
              type: boolean
              default: false
              description: if set to true, users which are added must agree to terms of access
            terms:
              type: string
              description: the terms of access which must be accepted. this should be either a text block or a url
            termsVersion:
              type: string
              description: optional method to version your terms. recommended if you want to update them later
        meta:
          type: string
          description: additional custom structured information

    domain:
      type: object
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/writeDomain'
      properties:
        id:
          type: string
          format: uuid
        modifiedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        modifiedBy:
          type: string
        createdBy:
          type: string
        authGroup:
          type: string
        organization:
          type: string
        active:
          type: boolean
          example: true
        associatedOrgProducts:
          type: array
          items:
            type: string
            description: products associated to the org, now associated to the domain

    writeDomain:
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        externalId:
          type: string
          description: linking to external systems

    permission:
      type: object
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/writePermission'
      properties:
        id:
          type: string
          format: uuid
        codedId:
          type: string
          description: small nano id for easy reference. unique to authgroup and product
        product:
          type: string
          description: the id of the associated product
          format: uuid
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string

    writePermission:
      type: object
      additionalProperties: false
      required:
        - target
        - action
      properties:
        target:
          type: string
          description: the target in the system to which an action is attributed
          example: user
        action:
          type: string
          description: the action allowed by this permission
          example: write
        ownershipRequired:
          type: boolean
          description: if true, this means the action is only possible on the target if the target is owned by the user
          example: false
        description:
          type: string
          description: something to present on the screen explaining what this is for