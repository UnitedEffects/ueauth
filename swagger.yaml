openapi: 3.0.0
info:
  version: 1.0.0
  title: Boilerplate Service
  description: A Boilerplate for services that run in docker or lambda
  x-logo:
    url: https://cdn-images-1.medium.com/max/280/1*vuHoiLlmWjuTJ9zK98jFtQ@2x.png
tags:
  - name: System
    description: Basic System Functionality
  - name: Users
    description: User Accounts
paths:
  /logs:
    post:
      tags:
        - System
      summary: Write a new log to the console and the db
      description: This is unlikely to be used with frequency.
      operationId: writeLog
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneLog'
        '405':
          description: Invalid input
        '500':
          description: Unknown error
      security:
        - UEAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeLog'
        description: Log data to be written
        required: true
    get:
      tags:
        - System
      summary: Retrieve all logs in the system
      description: 'Uses oData filtering to retrieve logs. You will need to use oData syntax.'
      operationId: getLogs
      parameters:
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
      security:
        - UEAuth: []
  '/logs/{id}':
    get:
      tags:
        - System
      summary: Find a log with its ID
      description: 'Codes should be "error", "notify", or "success".'
      operationId: getLog
      parameters:
        - name: id
          in: path
          description: id of log type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneLog'
        '400':
          description: Invalid code supplied
        '404':
          description: Log not found
      security:
        - UEAuth: []
    patch:
      tags:
        - System
      summary: Patch an existing Log
      description: Patch an existing Log - This is not a normal action for logs, used here as an example of JSON Patch only.
      operationId: patchLog
      parameters:
        - name: id
          in: path
          description: id of log type to update
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oneLog'
        '405':
          description: Invalid input
        '500':
          description: Unknown error
      security:
        - UEAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: JSON Patch specific to your log object
        required: true
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Health check
      responses:
        '200':
          description: GET successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultError'

  /account:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Register a new user
      operationId: writeAccount
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '405':
          description: Invalid input
        '500':
          description: Unknown error
      security:
        - UEAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeAccount'
        description: Account data to be written
        required: true
  /account/{authGroup}:
    get:
      tags:
        - Users
      summary: Retrieve all users (CRUD operation)
      description: 'Uses oData filtering to retrieve Accounts. This will need permissions.'
      operationId: getAccounts
      parameters:
        - name: authGroup
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccounts'
      security:
        - UEAuth: []
  '/account/{authGroup}/{id}':
    get:
      tags:
        - Users
      summary: Find a User with ID
      description: Identify a single user. Will require permissions
      operationId: getAccount
      parameters:
        - name: authGroup
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '400':
          description: Invalid code supplied
        '404':
          description: Log not found
      security:
        - UEAuth: []
    patch:
      tags:
        - Users
      summary: Patch an existing User
      description: Patch an existing User. This will require permissions.
      operationId: patchAccount
      parameters:
        - name: authGroup
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account to update
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '405':
          description: Invalid input
        '500':
          description: Unknown error
      security:
        - UEAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: JSON Patch specific to your account object
        required: true
servers:
  - url: http://localhost:3000/api
components:
  securitySchemes:
    UEAuth:
      type: http
      scheme: bearer
      name: Authorization
      description: 'For both UEAuth and other Bearer based tokens, simply enter the token (prefixing with "bearer" is not required).'
    basicAuth:
      type: http
      scheme: basic
    OpenID:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
  schemas:
    success:
      required:
        - err
        - message
      properties:
        err:
          type: string
        message:
          type: object
    defaultError:
      required:
        - err
        - message
      properties:
        err:
          type: integer
          format: int32
        message:
          type: string
    Log:
      type: object
      properties:
        id:
          type: string
          description: guid for this log
        logTimestamp:
          type: string
          format: date-time
          description: This is your rangeKey. This is a timestamp.
      allOf:
        - $ref: '#/components/schemas/writeLog'
    writeLog:
      type: object
      required:
        - message
      properties:
        code:
          type: string
          enum: ["ERROR", "SUCCESS", "NOTIFY", "LOG"]
        message:
          type: string
          description: This should be any brief summary data in string format.
        details:
          type: object
          description: You can directly pipe any error message objects to here.
    oneLog:
      properties:
        type:
          type: string
          default: Log
        data:
          $ref: '#/components/schemas/Log'
    Logs:
      properties:
        type:
          type: string
          enum: ['Log']
        data:
          type: array
          items:
            $ref: '#/components/schemas/Log'
    getAccounts:
      properties:
        type:
          type: string
          enum: ['Account']
        data:
          type: array
          items:
            $ref: '#/components/schemas/accountObject'
    getAccount:
      properties:
        type:
          type: string
          enum: ['Account']
        data:
          type: object
          $ref: '#/components/schemas/accountObject'
    accountObject:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: guid for this account
        createdAt:
          type: string
          format: date-time
          description: when the account was created
        modifiedAt:
          type: string
          format: date-time
          description: when was the account last modified
        verified:
          type: boolean
          description: whether or not the account was verified
      allOf:
        - $ref: '#/components/schemas/writeAccount'
    writeAccount:
      type: object
      additionalProperties: false
      required:
        - email
        - password
        - authGroup
      properties:
        email:
          type: string
          description: email address
        password:
          type: string
          description: this is a password
        authGroup:
          type: string
          description: group ID for this account. email addresses are unique to auth groups.
        txt:
          type: string
          pattern: '\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{1,14}$'
          description: optionally used for verifying account
    jsonPatch:
      additionalProperties: false
      description: Details for JSONPatch can be found at http://jsonpatch.com/
      type: array
      items:
        type: object
        description: Reference the update model for the full paths to update
        oneOf:
          - required:
              - op
              - path
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'move', 'copy', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: object
                description: 'The object, array or object to set the property at the above path to'
          - required:
              - op
              - path
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'move', 'copy', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: string
                description: 'The string, array or object to set the property at the above path to'
          - required:
              - op
              - path
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'move', 'copy', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: integer
                description: 'The integer, array or object to set the property at the above path to'