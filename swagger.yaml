openapi: 3.0.0
info:
  version: 1.0.0
  title: Boilerplate Service
  description: "UEAuth is provided by <a href='https://unitedeffects.com'>United Effects LLC</a>. Copyright &#169; 2021, all rights reserved.<br><br>UE Auth is a multi-tenant OIDC Provider intended to serve small to midsize organization that require functionality similar to those provided by enterprise Identity and Access SaaS providers but without the costs associated to the full scale of those solutions.<br><br>This OIDC Provider is provided in two parts. First, at its core, we are implementing the OIDC API via a certified OIDC provider library called <a href='https://github.com/panva/node-oidc-provider'>node-oidc-provider</a> by <a href='https://github.com/panva'>Panva</a>. This OpenAPI specification does not detail the entirety of that API. Instead, you can reference the official Open ID Connect documentation for the API (<a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>) or Panva's amazingly detailed documentation in <a href='https://github.com/panva/node-oidc-provider'>GitHub</a>. These endpoints are distinguished by being available directly from the root domain with the Auth Group context: e.g. <code>/{group}/token</code>. Second, in addition to the supported OIDC API, there are a series of UEAuth specific wrappers that provide Auth Group functionality (secured and segregated user groups), Account creation and management, Client queries, and Security Operations. These APIs are defined and documented below for your convenience. These APIs are distinguished in the service with prefix <code>/api</code>, to which this OpenAPI spec is defaulted. Additionally, as a general reference, this provider implements the following OIDC endpoints, which you will find specific contract documentation for in the above mentioned <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>.<br><code><br>authorization: '/{group}/auth',<br>
  check_session: '/{group}/session/check',<br>
  code_verification: '/{group}/device',<br>
  device_authorization: '/{group}/device/auth',<br>
  end_session: '/{group}/session/end',<br>
  introspection: '/{group}/token/introspection',<br>
  initial_access: '/{group}/token/initial_access',<br>
  jwks: '/{group}/jwks',<br>
  pushed_authorization_request: '/{group}/request',<br>
  registration: '/{group}/reg',<br>
  revocation: '/{group}/token/revocation',<br>
  token: '/{group}/token',<br>
  userinfo: '/{group}/me'</code><br><br><h2>Getting Started</h2><br><i>If you are the service owner and deploying it for the first time, see the github README for initial setup instructions.</i><br><br>You'll need an Auth Group to utilize the service.<ul><li>POST a new Auth Group making sure to save the Initial Access Token provided upon creation.</li><li>Once you have it, POST a new user account to the same auth group, making sure to use the same email address and the initial access token as a bearer token.</li><li>This will activate your auth group, create the account, and provide you with a client_id and secret to use for all interactions with this API.</li><li>You now have a working OIDC provider. Access the wellknown using your group ID or group 'pretty name': https://qa.ueauth.io/{group}/.well-known/openid-configuration</li></ul><br><br><h3 style='color:red'>THIS IS A DEMO AND TEST ENVIRONMENT. ALL DATA IS EPHEMERAL AND SUBJECT TO DELETION</h3>"
  x-logo:
    url: https://cdn-images-1.medium.com/max/280/1*vuHoiLlmWjuTJ9zK98jFtQ@2x.png
tags:
  - name: Auth Groups
    description: Auth Groups
  - name: Plugins
    description: Plugin configurations for the service
  - name: Users
    description: User Accounts
  - name: Invites
    description: Secure method of ownership and access exchange
  - name: Clients
    description: Administration of Group Registered Clients - Beyond OIDC Scope
  - name: Operations
    description: Commands for Artifact/Security Updates
  - name: OIDC
    description: Some Key OIDC endpoints (not all) - see <a href='https://openid.net/developers/specs/'>OIDC API DOCUMENTATION</a>
  - name: Health

paths:
  # Group APIs
  /api/groupcheck/{prettyName}:
    get:
      tags:
        - Auth Groups
      summary: Check if a pretty name is available to save to a group
      description: Check if a pretty name is available to save to a group
      parameters:
        - name: prettyName
          in: path
          description: check to see if this prettyName is available
          required: true
          schema:
            type: string
      responses:
        '202':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - Auth Group
                  available:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
  /api/group:
    post:
      tags:
        - Auth Groups
      summary: Register a new auth group
      description: Register a new auth group
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authGroupInitial'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeAuthGroup'
        description: Account data to be written
        required: true
  /api/groups:
    get:
      tags:
        - Auth Groups
      summary: Retrieve all auth groups (CRUD operation) - THIS SHOULD BE SYSTEM ADMIN ONLY
      description: 'Uses oData filtering to retrieve Accounts. This will need permissions.'
      parameters:
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroups'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
  '/api/group/{id}':
    get:
      tags:
        - Auth Groups
      summary: Find an Auth Group with ID
      description: Identify a single auth group. Will require permissions
      parameters:
        - name: id
          in: path
          description: id of group type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
    patch:
      tags:
        - Auth Groups
      summary: Patch an existing Auth Group - Owner or SYSTEM ADMIN
      description: Patch an existing Auth Group. This will require permissions.
      parameters:
        - name: id
          in: path
          description: id of group to update
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: JSON Patch specific to your account object
        required: true

  # Plugins
  /api/plugins/global/notifications:
    post:
      tags:
        - Plugins
      summary: Configure Global Notifications Plugins as Service Owner
      description: Configure Global Notifications Plugins as Service Owner
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  enabled:
                    type: boolean
                  notificationServiceClientId:
                    type: string
                  notificationServiceClientName:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                notificationServiceUri:
                  type: string
                  format: url
                  description: the url to the endpoint that will recieve http notification POST requests
                  example: "https://youremailortextservice.com/path"
        description: Setting for notification desired
        required: true

  # Account APIs
  /api/{group}/account:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Register a new user
      operationId: writeAccount
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/getAccount'
                  - $ref: '#/components/schemas/firstAccountWrite'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeAccount'
        description: Account data to be written
        required: true
  /api/{group}/accounts:
    get:
      tags:
        - Users
      summary: Retrieve all users (CRUD operation)
      description: 'Uses oData filtering to retrieve Accounts. This will need permissions.'
      operationId: getAccounts
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccounts'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
  '/api/{group}/account/{id}':
    get:
      tags:
        - Users
      summary: Find a User with ID
      description: Identify a single user. Will require permissions
      operationId: getAccount
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
    delete:
      tags:
        - Users
      summary: Hard delete a user - only authGroup owner
      description: Hard delete a user - only authGroup owner
      operationId: deleteAccount
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
    patch:
      tags:
        - Users
      summary: Patch an existing User
      description: Patch an existing User. This will require permissions.
      operationId: patchAccount
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account to update
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: JSON Patch specific to your account object
        required: true

  # Invite APIs
  /api/{group}/invite:
    post:
      tags:
        - Invites
      summary: Create an invitiation for group transfer or account access
      description: Create an invitiation for group transfer or account access.
      operationId: createInvite
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inviteObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createInvite'
        description: Invite data to be written
        required: true
  /api/{group}/invites:
    get:
      tags:
        - Invites
      summary: Retrieve all invites (CRUD operation)
      description: 'Uses oData filtering to retrieve Invites. Admins and Owners only.'
      operationId: getInvites
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInvites'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
  '/api/{group}/invite/{id}':
    get:
      tags:
        - Invites
      summary: Find an Invite with ID
      description: Identify a single Invite. Must be intended recipient or owner of auth group
      operationId: getInvite
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of invite type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inviteObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
    delete:
      tags:
        - Invites
      summary: Hard delete an Invite - only authGroup owner
      description: Hard delete an Invite - only authGroup owner
      operationId: deleteInvite
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of invite to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inviteObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
  /api/{group}/accept/{inviteType}:
    post:
      tags:
        - Invites
      summary: Accept an invitiation of type "group" or "account"
      description: Accept an invitiation of type "group" or "account". WIP - first target is group owner transfer
      operationId: accept
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: inviteType
          in: path
          description: type of invite, group or account
          schema:
            type: string
            enum:
              - group
              - account
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupOwnerChange'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/acceptInvite'
        description: Invite data to be written
        required: true

  # Non-OIDC Specific Client APIs
  /api/{group}/clients:
    get:
      tags:
        - Clients
      summary: Retrieve all clients (CRUD operation) - ADMIN
      description: 'Uses oData filtering to retrieve Clients. This will need permissions.'
      operationId: get
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClients'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
  '/api/{group}/client/{id}':
    get:
      tags:
        - Clients
      summary: Sanitized Response (no secrets) - Find a client with ID
      description: Identify a single client. Will require permissions
      operationId: getOne
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
    patch:
      tags:
        - Clients
      summary: Limited update capability from outside normal oidc api - auth group owner
      description: Limited update capability from outside normal oidc api - auth group owner
      operationId: patchOne
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: JSON Patch specific to your account object
        required: true
      security:
        - bearer: []
    delete:
      tags:
        - Clients
      summary: Hard delete - authGroup owners only
      description: Hard delete - authGroup owners only
      operationId: deleteOne
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []

  # Operation APIs for security update commands
  /api/{group}/operations:
    post:
      tags:
        - Operations
      summary: Execute operations against a auth group (only rotate_keys currently supported)
      description: Execute operations against a auth group (only rotate_keys currently supported)
      operationId: groupOperations
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations'
        description: Account data to be written
        required: true
  /api/{group}/operations/client/{id}:
    post:
      tags:
        - Operations
      summary: Execute operations against a client
      description: Execute operations against a client. Currently supports - rotate_secret & rotate_registration_access_token
      operationId: clientOperations
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: the client id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations'
        description: Account data to be written
        required: true

  # A few of the OIDC specific API Endpoints
  /{group}/token:
    post:
      tags:
        - OIDC
      summary: Request a token code provided via code authorization flow
      description: Request a token code provided via code authorization flow
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessTokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/codeAuthorizationTokenRequest'
        required: true
  /{group}/token/initial-access:
    post:
      tags:
        - OIDC
      summary: Request an OIDC initial access token
      description: Request an OIDC initial access token. You can use this to create a client or even provide it to someone so they can register to a locked auth group (a.k.a. user pool)
      operationId: getInitialAccessToken
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/initialAccessToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/initialAccessTokenRequest'
        required: false
  /{group}/reg:
    post:
      tags:
        - OIDC
      summary: Register a new client - may require an initial access token depending on config
      description: Register a new client - may require an initial access token depending on config
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerClient'
        required: true
  /{group}/reg/{id}:
    put:
      tags:
        - OIDC
      summary: Update a new client - may require a registration access token
      description: Update a new client - may require a registration access (RAI) token. If the RAI is required (configuration) it will rotate on each update and you will need to keep track of it. If you have lost your token, you can request a new one from the operations/client endpoint.
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: the client id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clientObjectUpdate'
        required: true
    get:
      tags:
        - OIDC
      summary: Get a registerd lient - may require a registration access token
      description: Get a registered client - may require a registration access (RAI) token. If the RAI is required (configuration) it will rotate on each update and you will need to keep track of it. If you have lost your token, you can request a new one from the operations/client endpoint.
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: the client id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/InvalidInput'
        '417':
          $ref: '#/components/responses/ExpectationFailed'
      security:
        - bearer: []

  # Health Check Endpoint
  /api/health:
    get:
      tags:
        - Health
      summary: Health check
      description: Health check
      responses:
        '200':
          description: GET successful
        '500':
          $ref: '#/components/responses/UnknownError'


servers:
  - url: http://localhost:3000
components:
  responses:
    BadRequest:
      description: Bad Request, try again
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'
    NotFound:
      description: Requested object not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'
    InvalidInput:
      description: Request is correct but one of your inputs is wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'
    ExpectationFailed:
      description: An expectation associated to the request failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'
    Unauthorized:
      description: Unauthorized Access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'
    UnknownError:
      description: Unknown Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultError'

  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      description: 'For Bearer based tokens, simply enter the token (prefixing with "bearer" is not required). Until Swagger UI supports OIDC directly, you can use this security field with OIDC tokens as well.'
    openId:
      type: openIdConnect
      description: OIDC specific OAuth2 implementation
      openIdConnectUrl: http://example.com/group/.well-known/openid-configuration

  schemas:
    defaultError:
      required:
        - error
        - message
        - id
      properties:
        error:
          type: string
          description: Type of error
        message:
          type: string
          description: Additional information regarding the error
        id:
          type: string
          description: Unique ID to help find the error in a logging stack

    operations:
      type: object
      required:
        - operation
      properties:
        operation:
          type: string
          enum:
            - rotate_secret
            - rotate_keys
            - rotate_registration_access_token

    initialAccessTokenRequest:
      properties:
        email:
          type: string
          description: This adds an email address to the token, locking its use to a user with that email address only. useful when providing a token as part of an invite; however, this is not required in all cases. For example, you do not need this to use an IAT for OIDC client creation.
        sub:
          type: string
          description: This adds a userId to the token, locking its use to a user with that id only.
        expires:
          type: number
          description: Number of seconds after which this token expires. Default is 604800 (7 days).

    initialAccessToken:
      properties:
        iat:
          type: number
          description: issue time
        exp:
          type: number
          description: expiration time
        kind:
          type: string
          default: "InitialAccessToken"
        jti:
          type: string
          description: the token
        email:
          type: string
          format: email
          description: if provided, this is the locked user email
        sub:
          type: string
          format: guid
          description: if provided, this is the locked user id

    codeAuthorizationTokenRequest:
      properties:
        grant_type:
          type: string
          description: Type of grant being requested, of which authorization_code is an example
          default: "authorization_code"
        client_secret:
          type: string
        redirect_uri:
          type: string
          format: url
        format:
          type: string
          description: opaque or jwt
        code:
          type: string
          description: code recieved from authorization redirect
        client_id:
          type: string

    acceptInvite:
      type: object
      required:
        - inviteToken
      additionalProperties: false
      properties:
        passCode:
          type: string
          description: optional passcode provided by invite creator
        inviteToken:
          type: string
          description: required invite/access token created to identify invitation

    groupOwnerChange:
      type: object
      properties:
        message:
          type: string
          description: a confirmation of success
        warning:
          type: string
          description: if there were any issues, they are defined here
        group:
          type: object
          $ref: '#/components/schemas/authGroup'

    accessTokens:
      properties:
        access_token:
          type: string
          description: this is an access_token and is primarily used for API access
        expires_in:
          type: number
          description: when tokens expire
        id_token:
          type: string
          description: this is an id_token and is primarily used to idenitify a user via claims, not for use with APIs
        scope:
          type: string
          description: requested scopes delimited by spaces
        token_type:
          type: string

    registerClient:
      properties:
        client_name:
          type: string
          description: A recognizable name identifying what this client represents
        grant_types:
          type: array
          items:
            type: string
            description: type of grant to enable - i.e. client_credentials, authorization_code or implicit
        response_types:
          type: array
          items:
            type: string
            description: type of responses to enable - i.e. 'id_token code' or 'id_token'. restrictions to combinations apply, see official oidc docs
        redirect_uris:
          type: array
          items:
            type: string
            format: url
            description: urls that are valid for redirection upon authorization

    getAccounts:
      properties:
        type:
          type: string
          enum: ['Account']
        data:
          type: array
          items:
            $ref: '#/components/schemas/accountObject'

    firstAccountWrite:
      description: the first account on a new auth group activates the group and creates a client
      properties:
        type:
          type: string
          enum: ['Account']
        data:
          type: object
          $ref: '#/components/schemas/accountObject'
        authGroup:
          type: object
          $ref: '#/components/schemas/authGroup'
        client:
          type: object
          $ref: '#/components/schemas/clientObject'


    getAccount:
      description: if the auth group is active, this is the response
      properties:
        type:
          type: string
          enum: ['Account']
        data:
          type: object
          $ref: '#/components/schemas/accountObject'

    getClients:
      type: object
      properties:
        type:
          type: string
          enum: ['Client']
        data:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/clientObject'

    getClient:
      type: object
      properties:
        type:
          type: string
          enum: ['Client']
        data:
          type: object
          $ref: '#/components/schemas/clientObject'

    writeClientObject:
      type: object
      required:
      - grant_types
      - response_types
      - redirect_uris
      properties:
        application_type:
          type: string
          default: web
          enum:
            - web
            - native
        grant_types:
          type: array
          default: []
          items:
            type: string
            enum:
             - authorization_code
             - implicit
             - refresh_token
             - client_credentials
        id_token_signed_response_alg:
          type: string
        post_logout_redirect_uris:
          type: array
          default: []
          items:
            type: string
            format: uri
        require_auth_time:
          type: boolean
          default: false
        response_types:
          type: array
          default: []
          items:
            type: string
            default: code
            enum:
              - code
              - id_token
              - token
        subject_type:
          type: string
        token_endpoint_auth_method:
          type: string
        introspection_endpoint_auth_method:
          type: string
        revocation_endpoint_auth_method:
          type: string
        client_name:
          type: string
          description: A name for the client that is unique within the authGroup
        redirect_uris:
          type: array
          default: []
          items:
            type: string
            format: uri

    clientObject:
      type: object
      required:
        - application_type
        - grant_types
        - response_types
        - client_id
        - client_name
        - client_secret
        - redirect_uris
        - auth_group
      description: this may not be all inclusive, consult the most current oidc specification
      allOf:
        - $ref: '#/components/schemas/writeClientObject'
      properties:
        request_uris:
          type: array
          default: []
          items:
            type: string
            format: uri
        client_id_issued_at:
          type: integer
        client_id:
          type: string
          description: GUID
        client_secret_expires_at:
          type: integer
          default: 0
        client_secret:
          type: string
          format: password
          description: Auto Generated Secret
        auth_group:
          type: string
          description: the tenant ID (or prettyName) for the authorization group of clients, accounts and oidc configs
        registration_client_uri:
          type: string
          description: the oidc spec client access url for api calls
          format: uri
        registration_access_token:
          type: string
          description: Required to POST or PUT updates to clients if not the authGroup owner. Rotates on each call.

    clientObjectUpdate:
      type: object
      required:
      - application_type
      - grant_types
      - response_types
      - client_id
      - client_name
      - redirect_uris
      - auth_group
      description: this may not be all inclusive, consult the most current oidc specification
      allOf:
        - $ref: '#/components/schemas/writeClientObject'
      properties:
        request_uris:
          type: array
          default: []
          items:
            type: string
            format: uri
        client_id_issued_at:
          type: integer
        client_id:
          type: string
          description: GUID
        client_secret_expires_at:
          type: integer
          default: 0
        client_secret:
          type: string
          format: password
          description: Auto Generated Secret
        auth_group:
          type: string
          description: the tenant ID (or prettyName) for the authorization group of clients, accounts and oidc configs

    accountObject:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: guid for this account
        createdAt:
          type: string
          format: date-time
          description: when the account was created
        modifiedAt:
          type: string
          format: date-time
          description: when was the account last modified
        modifiedBy:
          type: string
          description: Id of last modifier
        authGroup:
          type: string
          description: group ID for this account. email addresses are unique to auth groups.
        verified:
          type: boolean
          description: whether or not the account was verified
        blocked:
          type: boolean
          description: root level block of the user from access to the authGroup
        active:
          type: boolean
          description: status of the account
      allOf:
        - $ref: '#/components/schemas/writeAccount'

    writeAccount:
      type: object
      additionalProperties: false
      required:
        - email
        - password
      properties:
        username:
          type: string
          description: optional identifier, must be unique in the authGroup. If not provided, set to email.
        email:
          type: string
          description: email address
        password:
          type: string
          description: this is a password
        txt:
          type: string
          pattern: '\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{1,14}$'
          description: optionally used for verifying account, requires country code. e.g. +1
        metadata:
          type: object
          description: additional context provided by the implementer

    writeAuthGroup:
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
          description: name of the entity, org, or company creating this group
        prettyName:
          type: string
          description: URL friendly alternative name that can be used instead of the id when referencing the group
          pattern: '^[a-zA-Z0-9-_]*$'
        owner:
          type: string
          format: email
          description: Required to match to the first account added. Will be changed to account uuid after connection.
        locked:
          type: boolean
          default: false
          description: If true, no one can self register an account without an initial access code provided by an admin of the group.
        metadata:
          type: object
          description: extend this with additional data if needed
        config:
          type: object
          description: oidc configurations (wip)

    authGroup:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: nanoid for this account
        createdAt:
          type: string
          format: date-time
          description: when the account was created
        modifiedAt:
          type: string
          format: date-time
          description: when was the account last modified
        modifiedBy:
          type: string
          description: id of last modifier
        active:
          type: string
      allOf:
        - $ref: '#/components/schemas/writeAuthGroup'

    authGroupInitial:
      type: object
      allOf:
        - $ref: '#/components/schemas/authGroup'
      properties:
        securityExpiration:
          type: string
          format: date-time
          description: when this auth group will expire if it is not connected to the owner account and activated
        initialAccessToken:
          type: string
          description: bearer token to use when first connecting an account


    getGroup:
      properties:
        type:
          type: string
          enum:
            - Auth Group
        data:
          type: array
          items:
            $ref: '#/components/schemas/authGroup'

    getGroups:
      properties:
        type:
          type: string
          enum:
            - Auth Group
        data:
          type: object
          $ref: '#/components/schemas/authGroup'

    getInvites:
      properties:
        type:
          type: string
          enum:
            - Invites
        data:
          type: array
          items:
            $ref: '#/components/schemas/inviteObject'

    inviteObject:
      type: object
      properties:
        id:
          type: string
          format: guid
          description: unique id of the invitiation
        createdAt:
          type: string
          format: date-time
          description: when the invite was created
        expiresAt:
          type: string
          format: date-time
          description: when the account was created
        type:
          type: string
          enum:
            - group
            - account
          description: is this to transfer a group or create a new account?
        sub:
          type: string
          format: guid
          description: Subject/User ID of the user for whom this is intended
        email:
          type: string
          format: email
          description: email assoicated to the subject id
        txt:
          type: string
          description: phone number assocaited to the subject id - if available
        passCode:
          type: string
          description: Used as an optional user provided secret in addition to the system generated invite token. Share this with the intended user in private, they will need it to claim the invite. This is a required field for Group owner transfers. This will be hashed.
        authGroup:
          type: string
          description: authGroup of the invite
        accessToken:
          type: string
          description: Token associated to the invite. This will be hashed.
    createInvite:
      type: object
      additionalProperties: false
      required:
        - type
        - sub
      properties:
        type:
          type: string
          enum:
            - group
            - account
          description: is this to transfer a group or create a new account?
        daysToExpire:
          type: number
          format: int32
          description: how many days should the invite be active? Default is 7 days.
        sub:
          type: string
          description: Subject/User ID of the user for whom this is intended
        passCode:
          type: string
          description: Used as an optional user provided secret in addition to the system generated invite token. Share this with the intended user in private, they will need it to claim the invite. This is a required field for Group owner transfers.

    jsonPatch:
      additionalProperties: false
      description: Details for JSONPatch can be found at http://jsonpatch.com/
      type: array
      items:
        type: object
        description: Reference the update model for the full paths to update
        oneOf:
          - required:
              - op
              - path
              - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'move', 'copy', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: object
                description: 'The object, array or object to set the property at the above path to'
          - required:
              - op
              - path
              - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'move', 'copy', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: string
                description: 'The string, array or object to set the property at the above path to'
          - required:
              - op
              - path
              - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'move', 'copy', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: integer
                description: 'The integer, array or object to set the property at the above path to'
          - required:
              - op
              - path
            properties:
              op:
                type: string
                enum: ['remove']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'