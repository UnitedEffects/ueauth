openapi: 3.0.0
info:
  version: 1.0.0
  title: Boilerplate Service
  description: A Boilerplate for services that run in docker or lambda
  x-logo:
    url: https://cdn-images-1.medium.com/max/280/1*vuHoiLlmWjuTJ9zK98jFtQ@2x.png
tags:
  - name: System
    description: Basic System Functionality
  - name: Auth Groups
    description: Auth Groups
  - name: Users
    description: User Accounts
  - name: Clients
    description: Registered Clients
  - name: Operations
    description: Commands

paths:
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Health check
      responses:
        '200':
          description: GET successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultError'

  /groupcheck/{prettyName}:
    get:
      tags:
        - Auth Groups
      summary: Check if a pretty name is available to save to a group
      description: Check if a pretty name is available to save to a group
      parameters:
        - name: prettyName
          in: path
          description: check to see if this prettyName is available
          required: true
          schema:
            type: string
      responses:
        '202':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - Auth Group
                  available:
                    type: boolean
        '400':
          description: Bad Request
      security:
        - UEAuth: []

  /group:
    post:
      tags:
        - Auth Groups
      summary: Register a new auth group
      description: Register a new auth group
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authGroupInitial'
        '405':
          description: Invalid input
        '500':
          description: Unknown error
      security:
        - UEAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeAuthGroup'
        description: Account data to be written
        required: true
    get:
      tags:
        - Auth Groups
      summary: Retrieve all auth groups (CRUD operation) - THIS SHOULD BE SYSTEM ADMIN ONLY
      description: 'Uses oData filtering to retrieve Accounts. This will need permissions.'
      parameters:
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroups'
        '400':
          description: Bad Request
      security:
        - UEAuth: []
  '/group/{id}':
    get:
      tags:
        - Auth Groups
      summary: Find an Auth Group with ID
      description: Identify a single auth group. Will require permissions
      parameters:
        - name: id
          in: path
          description: id of group type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroup'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      security:
        - UEAuth: []
    patch:
      tags:
        - Auth Groups
      summary: Patch an existing Auth Group - Owner or SYSTEM ADMIN
      description: Patch an existing Auth Group. This will require permissions.
      parameters:
        - name: id
          in: path
          description: id of group to update
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroup'
        '405':
          description: Invalid input
        '500':
          description: Unknown error
      security:
        - UEAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: JSON Patch specific to your account object
        required: true

  /{group}/account:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Register a new user
      operationId: writeAccount
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '405':
          description: Invalid input
        '500':
          description: Unknown error
      security:
        - UEAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeAccount'
        description: Account data to be written
        required: true
    get:
      tags:
        - Users
      summary: Retrieve all users (CRUD operation)
      description: 'Uses oData filtering to retrieve Accounts. This will need permissions.'
      operationId: getAccounts
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccounts'
        '400':
          description: Bad Request
      security:
        - UEAuth: []
  '/{group}/account/{id}':
    get:
      tags:
        - Users
      summary: Find a User with ID
      description: Identify a single user. Will require permissions
      operationId: getAccount
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      security:
        - UEAuth: []
    delete:
      tags:
        - Users
      summary: Hard delete a user - only authGroup owner
      description: Hard delete a user - only authGroup owner
      operationId: deleteAccount
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      security:
        - UEAuth: []
    patch:
      tags:
        - Users
      summary: Patch an existing User
      description: Patch an existing User. This will require permissions.
      operationId: patchAccount
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account to update
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
        '405':
          description: Invalid input
        '500':
          description: Unknown error
      security:
        - UEAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: JSON Patch specific to your account object
        required: true

  /{group}/client:
    get:
      tags:
        - Clients
      summary: Retrieve all clients (CRUD operation) - ADMIN
      description: 'Uses oData filtering to retrieve Clients. This will need permissions.'
      operationId: get
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClients'
        '400':
          description: Bad Request
      security:
        - UEAuth: []
  '/{group}/client/{id}':
    get:
      tags:
        - Clients
      summary: Sanitized Response (no secrets) - Find a client with ID
      description: Identify a single client. Will require permissions
      operationId: getOne
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClient'
        '400':
          description: Bad Request
        '404':
          description: Not Fou d
      security:
        - UEAuth: []
    patch:
      tags:
        - Clients
      summary: Limited update capability from outside normal oidc api - auth group owner
      description: Limited update capability from outside normal oidc api - auth group owner
      operationId: patchOne
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClient'
        '400':
          description: Bad Request
        '404':
          description: Not found
        '405':
          description: Invalid input
        '417':
          description: Expectation Failed
        '500':
          description: Unknown error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: JSON Patch specific to your account object
        required: true
      security:
        - UEAuth: []
    delete:
      tags:
        - Clients
      summary: Hard delete - authGroup owners only
      description: Hard delete - authGroup owners only
      operationId: deleteOne
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: id of account type to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClient'
        '400':
          description: Bad Request
        '404':
          description: Not found
      security:
        - UEAuth: []


  /{group}/operations/client/{id}:
    post:
      tags:
        - Operations
      summary: Execute operations against a client (only rotate_secret currently supported)
      description: Execute operations against a client (only rotate_secret currently supported)
      operationId: clientOperations
      parameters:
        - name: group
          in: path
          description: the auth group ID associated to your business account
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: the client id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClient'
        '405':
          description: Invalid input
        '417':
          description: Expectation Failed
        '500':
          description: Unknown error
      security:
        - UEAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations'
        description: Account data to be written
        required: true

servers:
  - url: http://localhost:3000/api
components:
  securitySchemes:
    UEAuth:
      type: http
      scheme: bearer
      description: 'For both UEAuth and other Bearer based tokens, simply enter the token (prefixing with "bearer" is not required).'
    basicAuth:
      type: http
      scheme: basic
    OpenID:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
  schemas:
    success:
      properties:
        data:
          type: object

    defaultError:
      required:
        - error
        - message
      properties:
        err:
          type: string
        message:
          type: string

    operations:
      type: object
      required:
        - operation
      properties:
        operation:
          type: string
          enum:
            - rotate_secret

    Log:
      type: object
      properties:
        id:
          type: string
          description: guid for this log
        logTimestamp:
          type: string
          format: date-time
          description: This is your rangeKey. This is a timestamp.
      allOf:
        - $ref: '#/components/schemas/writeLog'

    writeLog:
      type: object
      required:
        - message
      properties:
        code:
          type: string
          enum: ["ERROR", "SUCCESS", "NOTIFY", "LOG"]
        message:
          type: string
          description: This should be any brief summary data in string format.
        details:
          type: object
          description: You can directly pipe any error message objects to here.

    oneLog:
      properties:
        type:
          type: string
          default: Log
        data:
          $ref: '#/components/schemas/Log'

    Logs:
      properties:
        type:
          type: string
          enum: ['Log']
        data:
          type: array
          items:
            $ref: '#/components/schemas/Log'

    getAccounts:
      properties:
        type:
          type: string
          enum: ['Account']
        data:
          type: array
          items:
            $ref: '#/components/schemas/accountObject'

    getAccount:
      properties:
        type:
          type: string
          enum: ['Account']
        data:
          type: object
          $ref: '#/components/schemas/accountObject'

    getClients:
      type: object
      properties:
        type:
          type: string
          enum: ['Client']
        data:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/clientObject'

    getClient:
      type: object
      properties:
        type:
          type: string
          enum: ['Client']
        data:
          type: object
          $ref: '#/components/schemas/clientObject'

    writeClientObject:
      type: object
      required:
      - grant_types
      - response_types
      - redirect_uris
      properties:
        application_type:
          type: string
          default: web
          enum:
            - web
            - native
        grant_types:
          type: array
          default: []
          items:
            type: string
            enum:
             - authorization_code
             - implicit
             - refresh_token
             - client_credentials
        id_token_signed_response_alg:
          type: string
        post_logout_redirect_uris:
          type: array
          default: []
          items:
            type: string
            format: uri
        require_auth_time:
          type: boolean
          default: false
        response_types:
          type: array
          default: []
          items:
            type: string
            default: code
            enum:
              - code
              - id_token
              - token
        subject_type:
          type: string
        token_endpoint_auth_method:
          type: string
        introspection_endpoint_auth_method:
          type: string
        revocation_endpoint_auth_method:
          type: string
        client_name:
          type: string
          description: A name for the client that is unique within the authGroup
        redirect_uris:
          type: array
          default: []
          items:
            type: string
            format: uri

    clientObject:
      type: object
      required:
      - application_type
      - grant_types
      - response_types
      - client_id
      - client_name
      - client_secret
      - redirect_uris
      - auth_group
      description: this may not be all inclusive, consult the most current oidc specification
      allOf:
        - $ref: '#/components/schemas/writeClientObject'
      properties:
        request_uris:
          type: array
          default: []
          items:
            type: string
            format: uri
        client_id_issued_at:
          type: integer
        client_id:
          type: string
          description: GUID
        client_secret_expires_at:
          type: integer
          default: 0
        client_secret:
          type: string
          format: password
          description: Auto Generated Secret
        auth_group:
          type: string
          description: the tenant ID (or prettyName) for the authorization group of clients, accounts and oidc configs
        registration_client_uri:
          type: string
          description: the oidc spec client access url for api calls
          format: uri
        registration_access_token:
          type: string
          description: Required to POST or PUT updates to clients if not the authGroup owner. Rotates on each call.


    accountObject:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: guid for this account
        createdAt:
          type: string
          format: date-time
          description: when the account was created
        modifiedAt:
          type: string
          format: date-time
          description: when was the account last modified
        modifiedBy:
          type: string
          description: Id of last modifier
        authGroup:
          type: string
          description: group ID for this account. email addresses are unique to auth groups.
        verified:
          type: boolean
          description: whether or not the account was verified
        blocked:
          type: boolean
          description: root level block of the user from access to the authGroup
        active:
          type: boolean
          description: status of the account
      allOf:
        - $ref: '#/components/schemas/writeAccount'

    writeAccount:
      type: object
      additionalProperties: false
      required:
        - email
        - password
        - authGroup
      properties:
        username:
          type: string
          description: optional identifier, must be unique in the authGroup. If not provided, set to email.
        email:
          type: string
          description: email address
        password:
          type: string
          description: this is a password
        txt:
          type: string
          pattern: '\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{1,14}$'
          description: optionally used for verifying account
        metadata:
          type: object
          description: additional context provided by the implementer

    writeAuthGroup:
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
          description: name of the entity, org, or company creating this group
        prettyName:
          type: string
          description: URL friendly alternative name that can be used instead of the id when referencing the group
          pattern: '^[a-zA-Z0-9-_]*$'
        owner:
          type: string
          format: email
          description: Required to match to the first account added. Will be changed to account uuid after connection.
        metadata:
          type: object
          description: extend this with additional data if needed
        config:
          type: object
          description: oidc configurations (wip)

    authGroup:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: nanoid for this account
        createdAt:
          type: string
          format: date-time
          description: when the account was created
        modifiedAt:
          type: string
          format: date-time
          description: when was the account last modified
        modifiedBy:
          type: string
          description: id of last modifier
        active:
          type: string
      allOf:
        - $ref: '#/components/schemas/writeAuthGroup'

    authGroupInitial:
      type: object
      allOf:
        - $ref: '#/components/schemas/authGroup'
      properties:
        securityExpiration:
          type: string
          format: date-time
          description: when this auth group will expire if it is not connected to the owner account and activated
        initialAccessToken:
          type: string
          description: bearer token to use when first connecting an account


    getGroup:
      properties:
        type:
          type: string
          enum:
            - Auth Group
        data:
          type: array
          items:
            $ref: '#/components/schemas/authGroup'

    getGroups:
      properties:
        type:
          type: string
          enum:
            - Auth Group
        data:
          type: object
          $ref: '#/components/schemas/authGroup'

    jsonPatch:
      additionalProperties: false
      description: Details for JSONPatch can be found at http://jsonpatch.com/
      type: array
      items:
        type: object
        description: Reference the update model for the full paths to update
        oneOf:
          - required:
              - op
              - path
              - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'move', 'copy', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: object
                description: 'The object, array or object to set the property at the above path to'
          - required:
              - op
              - path
              - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'move', 'copy', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: string
                description: 'The string, array or object to set the property at the above path to'
          - required:
              - op
              - path
              - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'remove', 'move', 'copy', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: integer
                description: 'The integer, array or object to set the property at the above path to'
          - required:
              - op
              - path
            properties:
              op:
                type: string
                enum: ['remove']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'